From a927b95e4e5ae7dae919521dd2cf9f2925695377 Mon Sep 17 00:00:00 2001
From: Nikhil Sonti <nikhilsv92@gmail.com>
Date: Fri, 8 Aug 2025 18:11:08 -0700
Subject: [PATCH] browseros metrics

---
 .../metrics/chrome_metrics_service_client.cc  |   2 +
 chrome/browser/prefs/browser_prefs.cc         |   2 +
 ...hrome_browser_main_extra_parts_profiles.cc |   2 +
 chrome/browser/ui/BUILD.gn                    |   2 +
 .../settings/browseros_metrics_handler.cc     |  56 +++++
 .../settings/browseros_metrics_handler.h      |  39 ++++
 .../browser/ui/webui/settings/settings_ui.cc  |   2 +
 chrome/common/pref_names.h                    |   4 +
 components/metrics/browseros_metrics/BUILD.gn |  39 ++++
 components/metrics/browseros_metrics/DEPS     |  14 ++
 .../browseros_metrics/browseros_metrics.cc    | 100 +++++++++
 .../browseros_metrics/browseros_metrics.h     |  40 ++++
 .../browseros_metrics_prefs.cc                |  25 +++
 .../browseros_metrics_prefs.h                 |  24 +++
 .../browseros_metrics_service.cc              | 201 ++++++++++++++++++
 .../browseros_metrics_service.h               |  81 +++++++
 .../browseros_metrics_service_factory.cc      |  56 +++++
 .../browseros_metrics_service_factory.h       |  48 +++++
 18 files changed, 737 insertions(+)
 create mode 100644 chrome/browser/ui/webui/settings/browseros_metrics_handler.cc
 create mode 100644 chrome/browser/ui/webui/settings/browseros_metrics_handler.h
 create mode 100644 components/metrics/browseros_metrics/BUILD.gn
 create mode 100644 components/metrics/browseros_metrics/DEPS
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics.cc
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics.h
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics_prefs.cc
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics_prefs.h
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics_service.cc
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics_service.h
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics_service_factory.cc
 create mode 100644 components/metrics/browseros_metrics/browseros_metrics_service_factory.h

diff --git a/chrome/browser/metrics/chrome_metrics_service_client.cc b/chrome/browser/metrics/chrome_metrics_service_client.cc
index ea4e1a621b201..21a7a3aef2872 100644
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -75,6 +75,7 @@
 #include "components/component_updater/component_updater_service.h"
 #include "components/crash/core/common/crash_keys.h"
 #include "components/history/core/browser/history_service.h"
+#include "components/metrics/browseros_metrics/browseros_metrics.h"
 #include "components/metrics/call_stacks/call_stack_profile_metrics_provider.h"
 #include "components/metrics/component_metrics_provider.h"
 #include "components/metrics/content/content_stability_metrics_provider.h"
@@ -1041,6 +1042,7 @@ void ChromeMetricsServiceClient::RegisterUKMProviders() {
 }
 
 void ChromeMetricsServiceClient::NotifyApplicationNotIdle() {
+  browseros_metrics::BrowserOSMetrics::Log("alive", 0.01);
   metrics_service_->OnApplicationNotIdle();
 }
 
diff --git a/chrome/browser/prefs/browser_prefs.cc b/chrome/browser/prefs/browser_prefs.cc
index 9a00400829ae1..c83cfdfe3708c 100644
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -102,6 +102,7 @@
 #include "components/breadcrumbs/core/breadcrumbs_status.h"
 #include "components/browsing_data/core/pref_names.h"
 #include "components/certificate_transparency/pref_names.h"
+#include "components/metrics/browseros_metrics/browseros_metrics_prefs.h"
 #include "components/collaboration/public/pref_names.h"
 #include "components/commerce/core/pref_names.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
@@ -1868,6 +1869,7 @@ void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry,
   AnnouncementNotificationService::RegisterProfilePrefs(registry);
   autofill::prefs::RegisterProfilePrefs(registry);
   browsing_data::prefs::RegisterBrowserUserPrefs(registry);
+  browseros_metrics::RegisterProfilePrefs(registry);
   capture_policy::RegisterProfilePrefs(registry);
   certificate_transparency::prefs::RegisterPrefs(registry);
   ChromeContentBrowserClient::RegisterProfilePrefs(registry);
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
index c6e46fb1d8030..f06e6e0e07cfa 100644
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -49,6 +49,7 @@
 #include "chrome/browser/collaboration/messaging/messaging_backend_service_factory.h"
 #include "chrome/browser/commerce/shopping_service_factory.h"
 #include "chrome/browser/consent_auditor/consent_auditor_factory.h"
+#include "components/metrics/browseros_metrics/browseros_metrics_service_factory.h"
 #include "chrome/browser/content_index/content_index_provider_factory.h"
 #include "chrome/browser/content_settings/cookie_settings_factory.h"
 #include "chrome/browser/content_settings/host_content_settings_map_factory.h"
@@ -722,6 +723,7 @@ void ChromeBrowserMainExtraPartsProfiles::
 #endif
   BitmapFetcherServiceFactory::GetInstance();
   BluetoothChooserContextFactory::GetInstance();
+  browseros_metrics::BrowserOSMetricsServiceFactory::GetInstance();
 #if defined(TOOLKIT_VIEWS)
   BookmarkExpandedStateTrackerFactory::GetInstance();
   BookmarkMergedSurfaceServiceFactory::GetInstance();
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index 93096ad92c1a3..b14d64308080f 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -1566,6 +1566,8 @@ static_library("ui") {
       "webui/settings/reset_settings_handler.h",
       "webui/settings/search_engines_handler.cc",
       "webui/settings/search_engines_handler.h",
+      "webui/settings/browseros_metrics_handler.cc",
+      "webui/settings/browseros_metrics_handler.h",
       "webui/settings/settings_clear_browsing_data_handler.cc",
       "webui/settings/settings_clear_browsing_data_handler.h",
       "webui/settings/settings_localized_strings_privacy_sandbox_provider.cc",
diff --git a/chrome/browser/ui/webui/settings/browseros_metrics_handler.cc b/chrome/browser/ui/webui/settings/browseros_metrics_handler.cc
new file mode 100644
index 0000000000000..a213967b46676
--- /dev/null
+++ b/chrome/browser/ui/webui/settings/browseros_metrics_handler.cc
@@ -0,0 +1,56 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/settings/browseros_metrics_handler.h"
+
+#include "base/logging.h"
+#include "base/values.h"
+#include "components/metrics/browseros_metrics/browseros_metrics.h"
+
+namespace settings {
+
+BrowserOSMetricsHandler::BrowserOSMetricsHandler() = default;
+
+BrowserOSMetricsHandler::~BrowserOSMetricsHandler() = default;
+
+void BrowserOSMetricsHandler::RegisterMessages() {
+  web_ui()->RegisterMessageCallback(
+      "logBrowserOSMetric",
+      base::BindRepeating(&BrowserOSMetricsHandler::HandleLogBrowserOSMetric,
+                         base::Unretained(this)));
+}
+
+void BrowserOSMetricsHandler::HandleLogBrowserOSMetric(
+    const base::Value::List& args) {
+  if (args.size() < 1 || !args[0].is_string()) {
+    LOG(WARNING) << "browseros: Invalid metric event name";
+    return;
+  }
+
+  const std::string& event_name = args[0].GetString();
+  
+  if (args.size() > 1) {
+    // Has properties
+    if (args[1].is_dict()) {
+      base::Value::Dict properties = args[1].GetDict().Clone();
+      browseros_metrics::BrowserOSMetrics::Log(event_name, std::move(properties));
+    } else {
+      LOG(WARNING) << "browseros: Invalid metric properties format";
+      browseros_metrics::BrowserOSMetrics::Log(event_name);
+    }
+  } else {
+    // No properties
+    browseros_metrics::BrowserOSMetrics::Log(event_name);
+  }
+}
+
+void BrowserOSMetricsHandler::OnJavascriptAllowed() {
+  // No special setup needed
+}
+
+void BrowserOSMetricsHandler::OnJavascriptDisallowed() {
+  // No cleanup needed
+}
+
+}  // namespace settings
\ No newline at end of file
diff --git a/chrome/browser/ui/webui/settings/browseros_metrics_handler.h b/chrome/browser/ui/webui/settings/browseros_metrics_handler.h
new file mode 100644
index 0000000000000..dfcb0485c0432
--- /dev/null
+++ b/chrome/browser/ui/webui/settings/browseros_metrics_handler.h
@@ -0,0 +1,39 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_SETTINGS_BROWSEROS_METRICS_HANDLER_H_
+#define CHROME_BROWSER_UI_WEBUI_SETTINGS_BROWSEROS_METRICS_HANDLER_H_
+
+#include "chrome/browser/ui/webui/settings/settings_page_ui_handler.h"
+
+namespace base {
+class Value;
+}  // namespace base
+
+namespace settings {
+
+// Handler for BrowserOS metrics messages from the settings page.
+class BrowserOSMetricsHandler : public SettingsPageUIHandler {
+ public:
+  BrowserOSMetricsHandler();
+  ~BrowserOSMetricsHandler() override;
+
+  BrowserOSMetricsHandler(const BrowserOSMetricsHandler&) = delete;
+  BrowserOSMetricsHandler& operator=(const BrowserOSMetricsHandler&) = delete;
+
+  // WebUIMessageHandler:
+  void RegisterMessages() override;
+
+ private:
+  // Handler for logBrowserOSMetric message from JavaScript
+  void HandleLogBrowserOSMetric(const base::Value::List& args);
+
+  // SettingsPageUIHandler:
+  void OnJavascriptAllowed() override;
+  void OnJavascriptDisallowed() override;
+};
+
+}  // namespace settings
+
+#endif  // CHROME_BROWSER_UI_WEBUI_SETTINGS_BROWSEROS_METRICS_HANDLER_H_
\ No newline at end of file
diff --git a/chrome/browser/ui/webui/settings/settings_ui.cc b/chrome/browser/ui/webui/settings/settings_ui.cc
index 83e3f47da279e..67c338a86ccc8 100644
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -59,6 +59,7 @@
 #include "chrome/browser/ui/webui/settings/accessibility_main_handler.h"
 #include "chrome/browser/ui/webui/settings/appearance_handler.h"
 #include "chrome/browser/ui/webui/settings/browser_lifetime_handler.h"
+#include "chrome/browser/ui/webui/settings/browseros_metrics_handler.h"
 #include "chrome/browser/ui/webui/settings/downloads_handler.h"
 #include "chrome/browser/ui/webui/settings/font_handler.h"
 #include "chrome/browser/ui/webui/settings/hats_handler.h"
@@ -292,6 +293,7 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
 #if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
   AddSettingsPageUIHandler(std::make_unique<PasskeysHandler>());
 #endif
+  AddSettingsPageUIHandler(std::make_unique<BrowserOSMetricsHandler>());
 
 #if BUILDFLAG(IS_CHROMEOS)
   InitBrowserSettingsWebUIHandlers();
diff --git a/chrome/common/pref_names.h b/chrome/common/pref_names.h
index 12f83b0cc1ab5..fb0a6d63e909a 100644
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -4273,6 +4273,10 @@ inline constexpr char kServiceWorkerToControlSrcdocIframeEnabled[] =
 // is set as a SharedWorker script URL.
 inline constexpr char kSharedWorkerBlobURLFixEnabled[] =
     "worker.shared_worker_blob_url_fix_enabled";
+
+// String containing the stable client ID for BrowserOS metrics
+inline constexpr char kBrowserOSMetricsClientId[] =
+    "browseros.metrics_client_id";
 }  // namespace prefs
 
 #endif  // CHROME_COMMON_PREF_NAMES_H_
diff --git a/components/metrics/browseros_metrics/BUILD.gn b/components/metrics/browseros_metrics/BUILD.gn
new file mode 100644
index 0000000000000..c57c43bb575ea
--- /dev/null
+++ b/components/metrics/browseros_metrics/BUILD.gn
@@ -0,0 +1,39 @@
+# Copyright 2025 The Chromium Authors
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/features.gni")
+
+static_library("browseros_metrics") {
+  sources = [
+    "browseros_metrics.cc",
+    "browseros_metrics.h",
+    "browseros_metrics_prefs.cc",
+    "browseros_metrics_prefs.h",
+    "browseros_metrics_service.cc",
+    "browseros_metrics_service.h",
+    "browseros_metrics_service_factory.cc",
+    "browseros_metrics_service_factory.h",
+  ]
+
+  deps = [
+    "//base",
+    "//chrome/browser/profiles:profile",
+    "//chrome/common:constants",
+    "//components/keyed_service/content",
+    "//components/keyed_service/core",
+    "//components/pref_registry",
+    "//components/prefs",
+    "//components/version_info",
+    "//content/public/browser",
+    "//net",
+    "//services/network/public/cpp",
+    "//services/network/public/mojom",
+    "//url",
+  ]
+
+  public_deps = [
+    "//base",
+    "//components/keyed_service/core",
+  ]
+}
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/DEPS b/components/metrics/browseros_metrics/DEPS
new file mode 100644
index 0000000000000..365047c83b7f2
--- /dev/null
+++ b/components/metrics/browseros_metrics/DEPS
@@ -0,0 +1,14 @@
+include_rules = [
+  "+base",
+  "+chrome/browser/profiles/profile.h",
+  "+chrome/common/pref_names.h",
+  "+components/keyed_service/content",
+  "+components/keyed_service/core",
+  "+components/pref_registry",
+  "+components/prefs",
+  "+components/version_info",
+  "+content/public/browser",
+  "+net",
+  "+services/network/public",
+  "+url",
+]
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/browseros_metrics.cc b/components/metrics/browseros_metrics/browseros_metrics.cc
new file mode 100644
index 0000000000000..02a1dc121bb7a
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics.cc
@@ -0,0 +1,100 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/metrics/browseros_metrics/browseros_metrics.h"
+
+#include "base/logging.h"
+#include "base/rand_util.h"
+#include "base/task/thread_pool.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "components/metrics/browseros_metrics/browseros_metrics_service_factory.h"
+#include "components/metrics/browseros_metrics/browseros_metrics_service.h"
+#include "content/public/browser/browser_task_traits.h"
+#include "content/public/browser/browser_thread.h"
+
+namespace browseros_metrics {
+
+namespace {
+
+// Helper to get the metrics service
+BrowserOSMetricsService* GetMetricsService() {
+  // Must be called on UI thread
+  if (!content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {
+    return nullptr;
+  }
+  
+  // Get the profile manager
+  ProfileManager* profile_manager = g_browser_process->profile_manager();
+  if (!profile_manager) {
+    return nullptr;
+  }
+  
+  // Get the last used profile (or the default one)
+  Profile* profile = profile_manager->GetLastUsedProfile();
+  if (!profile || profile->IsOffTheRecord()) {
+    return nullptr;
+  }
+  
+  // Get the metrics service
+  return BrowserOSMetricsServiceFactory::GetForBrowserContext(profile);
+}
+
+void LogOnUIThread(const std::string& event_name, base::Value::Dict properties) {
+  auto* service = GetMetricsService();
+  if (service) {
+    service->CaptureEvent(event_name, std::move(properties));
+  } else {
+    VLOG(1) << "browseros: Metrics service not available for event: " << event_name;
+  }
+}
+
+}  // namespace
+
+// static
+void BrowserOSMetrics::Log(const std::string& event_name, double sample_rate) {
+  Log(event_name, base::Value::Dict(), sample_rate);
+}
+
+// static
+void BrowserOSMetrics::Log(const std::string& event_name,
+                           std::initializer_list<std::pair<std::string, base::Value>> properties,
+                           double sample_rate) {
+  base::Value::Dict dict;
+  for (const auto& [key, value] : properties) {
+    dict.Set(key, value.Clone());
+  }
+  Log(event_name, std::move(dict), sample_rate);
+}
+
+// static
+void BrowserOSMetrics::Log(const std::string& event_name, base::Value::Dict properties,
+                           double sample_rate) {
+  if (sample_rate <= 0.0 || sample_rate > 1.0) {
+    return;
+  }
+  
+  if (sample_rate < 1.0) {
+    double random_value = base::RandDouble();
+    if (random_value > sample_rate) {
+      return;
+    }
+  }
+  
+  if (sample_rate < 1.0) {
+    properties.Set("sample_rate", sample_rate);
+  }
+  
+  // If we're already on the UI thread, log directly
+  if (content::BrowserThread::CurrentlyOn(content::BrowserThread::UI)) {
+    LogOnUIThread(event_name, std::move(properties));
+  } else {
+    // Post to UI thread
+    content::GetUIThreadTaskRunner({})->PostTask(
+        FROM_HERE,
+        base::BindOnce(&LogOnUIThread, event_name, std::move(properties)));
+  }
+}
+
+}  // namespace browseros_metrics
diff --git a/components/metrics/browseros_metrics/browseros_metrics.h b/components/metrics/browseros_metrics/browseros_metrics.h
new file mode 100644
index 0000000000000..73e98afdaa28a
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics.h
@@ -0,0 +1,40 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_H_
+#define COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_H_
+
+#include <string>
+#include <utility>
+
+#include "base/values.h"
+
+namespace browseros_metrics {
+
+// Simple static API for logging BrowserOS metrics.
+// Usage: BrowserOSMetrics::Log("event.name");
+class BrowserOSMetrics {
+ public:
+  // Log an event with no properties
+  // sample_rate: 0.0 to 1.0, defaults to 1.0 (always log)
+  // For example, sample_rate=0.1 means log only 10% of the time
+  static void Log(const std::string& event_name, double sample_rate = 1.0);
+  
+  // Log an event with properties using initializer list
+  // Example: Log("event", {{"key1", "value1"}, {"key2", 123}})
+  static void Log(const std::string& event_name,
+                  std::initializer_list<std::pair<std::string, base::Value>> properties,
+                  double sample_rate = 1.0);
+  
+  // Log an event with pre-built properties dict
+  static void Log(const std::string& event_name, base::Value::Dict properties,
+                  double sample_rate = 1.0);
+
+ private:
+  BrowserOSMetrics() = delete;
+};
+
+}  // namespace browseros_metrics
+
+#endif  // COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_H_
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/browseros_metrics_prefs.cc b/components/metrics/browseros_metrics/browseros_metrics_prefs.cc
new file mode 100644
index 0000000000000..87f898f345e74
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics_prefs.cc
@@ -0,0 +1,25 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/metrics/browseros_metrics/browseros_metrics_prefs.h"
+
+#include "chrome/common/pref_names.h"
+#include "components/prefs/pref_registry_simple.h"
+#include "components/pref_registry/pref_registry_syncable.h"
+
+namespace browseros_metrics {
+
+void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
+  // Register the stable client ID pref - this should not sync across devices
+  // as each browser instance needs its own unique ID
+  registry->RegisterStringPref(
+      prefs::kBrowserOSMetricsClientId,
+      std::string());
+}
+
+void RegisterLocalStatePrefs(PrefRegistrySimple* registry) {
+  // Currently no local state prefs, but keeping this for future expansion
+}
+
+}  // namespace browseros_metrics
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/browseros_metrics_prefs.h b/components/metrics/browseros_metrics/browseros_metrics_prefs.h
new file mode 100644
index 0000000000000..a417e8d8af351
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics_prefs.h
@@ -0,0 +1,24 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_PREFS_H_
+#define COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_PREFS_H_
+
+class PrefRegistrySimple;
+
+namespace user_prefs {
+class PrefRegistrySyncable;
+}  // namespace user_prefs
+
+namespace browseros_metrics {
+
+// Registers BrowserOS metrics preferences for the profile.
+void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry);
+
+// Registers BrowserOS metrics preferences for local state.
+void RegisterLocalStatePrefs(PrefRegistrySimple* registry);
+
+}  // namespace browseros_metrics
+
+#endif  // COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_PREFS_H_
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/browseros_metrics_service.cc b/components/metrics/browseros_metrics/browseros_metrics_service.cc
new file mode 100644
index 0000000000000..707ac50393820
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics_service.cc
@@ -0,0 +1,201 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/metrics/browseros_metrics/browseros_metrics_service.h"
+
+#include <memory>
+#include <string>
+
+#include "base/uuid.h"
+#include "base/json/json_writer.h"
+#include "base/logging.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/system/sys_info.h"
+#include "base/time/time.h"
+#include "chrome/common/pref_names.h"
+#include "components/prefs/pref_service.h"
+#include "components/version_info/version_info.h"
+#include "net/base/load_flags.h"
+#include "net/http/http_status_code.h"
+#include "net/traffic_annotation/network_traffic_annotation.h"
+#include "services/network/public/cpp/resource_request.h"
+#include "services/network/public/cpp/shared_url_loader_factory.h"
+#include "services/network/public/cpp/simple_url_loader.h"
+#include "services/network/public/mojom/url_response_head.mojom.h"
+
+namespace browseros_metrics {
+
+namespace {
+
+// Event naming convention:
+// All events from C++ code are prefixed with "browseros.native." to distinguish
+// them from extension events which would use "browseros.extension." prefix.
+// This helps with analytics filtering and understanding event sources.
+
+// PostHog API configuration
+constexpr char kPostHogApiKey[] = "phc_PRrpVnBMVJgUumvaXzUnwKZ1dDs3L8MSICLhTdnc8jC";
+constexpr char kPostHogEndpoint[] = "https://us.i.posthog.com/i/v0/e/";
+constexpr size_t kMaxUploadSize = 256 * 1024;  // 256KB max upload size
+
+constexpr net::NetworkTrafficAnnotationTag kBrowserOSMetricsTrafficAnnotation =
+    net::DefineNetworkTrafficAnnotation("browseros_metrics", R"(
+        semantics {
+          sender: "BrowserOS Metrics"
+          description:
+            "Sends anonymous usage metrics to PostHog for BrowserOS features. "
+            "This helps improve the browser by understanding how features are "
+            "used. No personally identifiable information is collected."
+          trigger:
+            "Triggered when BrowserOS features are used, such as extension "
+            "actions or settings changes."
+          data:
+            "Event name, timestamp, anonymous client ID, browser version, "
+            "OS information, and feature-specific properties without PII."
+          destination: OTHER
+          destination_other:
+            "PostHog analytics service at us.i.posthog.com"
+        }
+        policy {
+          cookies_allowed: NO
+          setting:
+            "This feature cannot be disabled through settings. Events are "
+            "sent anonymously without user identification."
+          policy_exception_justification:
+            "Not implemented. Analytics are anonymous and help improve "
+            "the browser experience."
+        })");
+
+}  // namespace
+
+BrowserOSMetricsService::BrowserOSMetricsService(
+    PrefService* pref_service,
+    scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory)
+    : pref_service_(pref_service),
+      url_loader_factory_(std::move(url_loader_factory)) {
+  CHECK(pref_service_);
+  CHECK(url_loader_factory_);
+  InitializeClientId();
+}
+
+BrowserOSMetricsService::~BrowserOSMetricsService() = default;
+
+void BrowserOSMetricsService::CaptureEvent(const std::string& event_name,
+                                            base::Value::Dict properties) {
+  if (event_name.empty()) {
+    LOG(WARNING) << "browseros: Attempted to capture event with empty name";
+    return;
+  }
+
+  VLOG(1) << "browseros: Capturing event: " << event_name;
+  
+  // Add default properties
+  AddDefaultProperties(properties);
+  
+  // Send to PostHog
+  SendEventToPostHog(event_name, std::move(properties));
+}
+
+std::string BrowserOSMetricsService::GetClientId() const {
+  return client_id_;
+}
+
+void BrowserOSMetricsService::Shutdown() {
+  // Cancel any pending network requests
+  weak_factory_.InvalidateWeakPtrs();
+}
+
+void BrowserOSMetricsService::InitializeClientId() {
+  CHECK(pref_service_);
+  
+  // Check if we have an existing client ID
+  const std::string& stored_id =
+      pref_service_->GetString(prefs::kBrowserOSMetricsClientId);
+  
+  if (!stored_id.empty() && base::Uuid::ParseCaseInsensitive(stored_id).is_valid()) {
+    client_id_ = stored_id;
+    VLOG(1) << "browseros: Using existing metrics client ID";
+  } else {
+    // Generate a new UUID
+    client_id_ = base::Uuid::GenerateRandomV4().AsLowercaseString();
+    pref_service_->SetString(prefs::kBrowserOSMetricsClientId, client_id_);
+    LOG(INFO) << "browseros: Generated new metrics client ID";
+  }
+  VLOG(1) << "browseros: Metrics client ID: " << client_id_;
+}
+
+void BrowserOSMetricsService::SendEventToPostHog(
+    const std::string& event_name,
+    base::Value::Dict properties) {
+  // Build the request payload
+  base::Value::Dict payload;
+  payload.Set("api_key", kPostHogApiKey);
+  payload.Set("event", "browseros.native." + event_name);
+  payload.Set("distinct_id", client_id_);
+  payload.Set("properties", std::move(properties));
+  
+  // Convert to JSON
+  std::string json_payload;
+  if (!base::JSONWriter::Write(payload, &json_payload)) {
+    LOG(ERROR) << "browseros: Failed to serialize metrics payload";
+    return;
+  }
+
+  // Create the request
+  auto resource_request = std::make_unique<network::ResourceRequest>();
+  resource_request->url = GURL(kPostHogEndpoint);
+  resource_request->method = "POST";
+  resource_request->load_flags = net::LOAD_DISABLE_CACHE;
+  resource_request->credentials_mode = network::mojom::CredentialsMode::kOmit;
+  
+  // Create the URL loader
+  auto url_loader = network::SimpleURLLoader::Create(
+      std::move(resource_request), kBrowserOSMetricsTrafficAnnotation);
+  url_loader->SetAllowHttpErrorResults(true);
+  url_loader->AttachStringForUpload(json_payload, "application/json");
+  
+  // Send the request
+  network::SimpleURLLoader* loader_ptr = url_loader.get();
+  loader_ptr->DownloadToString(
+      url_loader_factory_.get(),
+      base::BindOnce(&BrowserOSMetricsService::OnPostHogResponse,
+                     weak_factory_.GetWeakPtr(), std::move(url_loader)),
+      kMaxUploadSize);
+}
+
+void BrowserOSMetricsService::OnPostHogResponse(
+    std::unique_ptr<network::SimpleURLLoader> loader,
+    std::unique_ptr<std::string> response_body) {
+  int response_code = 0;
+  if (loader->ResponseInfo() && loader->ResponseInfo()->headers) {
+    response_code = loader->ResponseInfo()->headers->response_code();
+  }
+  
+  if (response_code == net::HTTP_OK) {
+    VLOG(2) << "browseros: Metrics event sent successfully";
+  } else {
+    LOG(WARNING) << "browseros: Failed to send metrics event. Response code: "
+                 << response_code;
+    if (response_body && !response_body->empty()) {
+      LOG(WARNING) << "browseros: Error response: " << *response_body;
+    }
+  }
+}
+
+void BrowserOSMetricsService::AddDefaultProperties(
+    base::Value::Dict& properties) {
+  // Add browser version
+  properties.Set("$browser_version", version_info::GetVersionNumber());
+  
+  // Add OS information
+  properties.Set("$os", base::SysInfo::OperatingSystemName());
+  properties.Set("$os_version", base::SysInfo::OperatingSystemVersion());
+  
+  // Ensure anonymous tracking
+  properties.Set("$process_person_profile", false);
+  
+  // Add platform architecture
+  properties.Set("$arch", base::SysInfo::OperatingSystemArchitecture());
+}
+
+}  // namespace browseros_metrics
diff --git a/components/metrics/browseros_metrics/browseros_metrics_service.h b/components/metrics/browseros_metrics/browseros_metrics_service.h
new file mode 100644
index 0000000000000..db124fd11382a
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics_service.h
@@ -0,0 +1,81 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_SERVICE_H_
+#define COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_SERVICE_H_
+
+#include <memory>
+#include <string>
+
+#include "base/functional/callback.h"
+#include "base/memory/weak_ptr.h"
+#include "base/values.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "services/network/public/cpp/simple_url_loader.h"
+#include "url/gurl.h"
+
+class PrefService;
+
+namespace network {
+class SharedURLLoaderFactory;
+}  // namespace network
+
+namespace browseros_metrics {
+
+// Service for capturing and sending analytics events to PostHog.
+// This service manages a stable client ID and sends events to the PostHog API.
+class BrowserOSMetricsService : public KeyedService {
+ public:
+  explicit BrowserOSMetricsService(
+      PrefService* pref_service,
+      scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory);
+
+  BrowserOSMetricsService(const BrowserOSMetricsService&) = delete;
+  BrowserOSMetricsService& operator=(const BrowserOSMetricsService&) = delete;
+
+  ~BrowserOSMetricsService() override;
+
+  // Captures a single event with the given name and properties.
+  // Properties should not contain PII. Common properties like client_id,
+  // browser version, and OS are added automatically.
+  void CaptureEvent(const std::string& event_name,
+                    base::Value::Dict properties);
+
+  // Returns the stable client ID for this browser instance.
+  std::string GetClientId() const;
+
+  // KeyedService:
+  void Shutdown() override;
+
+ private:
+  // Initializes or retrieves the stable client ID from preferences.
+  void InitializeClientId();
+
+  // Sends the event to PostHog API.
+  void SendEventToPostHog(const std::string& event_name,
+                          base::Value::Dict properties);
+
+  // Handles the response from PostHog API.
+  void OnPostHogResponse(std::unique_ptr<network::SimpleURLLoader> loader,
+                         std::unique_ptr<std::string> response_body);
+
+  // Adds default properties to the event.
+  void AddDefaultProperties(base::Value::Dict& properties);
+
+  // PrefService for storing the stable client ID.
+  raw_ptr<PrefService> pref_service_;
+
+  // Factory for creating URL loaders.
+  scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory_;
+
+  // Stable client ID for this browser instance.
+  std::string client_id_;
+
+  // Weak pointer factory for callbacks.
+  base::WeakPtrFactory<BrowserOSMetricsService> weak_factory_{this};
+};
+
+}  // namespace browseros_metrics
+
+#endif  // COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_SERVICE_H_
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/browseros_metrics_service_factory.cc b/components/metrics/browseros_metrics/browseros_metrics_service_factory.cc
new file mode 100644
index 0000000000000..bddc97f6d9a05
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics_service_factory.cc
@@ -0,0 +1,56 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/metrics/browseros_metrics/browseros_metrics_service_factory.h"
+
+#include <memory>
+
+#include "base/no_destructor.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "components/metrics/browseros_metrics/browseros_metrics_service.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/browser/browser_context.h"
+#include "content/public/browser/storage_partition.h"
+
+namespace browseros_metrics {
+
+// static
+BrowserOSMetricsService* BrowserOSMetricsServiceFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<BrowserOSMetricsService*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+
+// static
+BrowserOSMetricsServiceFactory*
+BrowserOSMetricsServiceFactory::GetInstance() {
+  static base::NoDestructor<BrowserOSMetricsServiceFactory> instance;
+  return instance.get();
+}
+
+BrowserOSMetricsServiceFactory::BrowserOSMetricsServiceFactory()
+    : BrowserContextKeyedServiceFactory(
+          "BrowserOSMetricsService",
+          BrowserContextDependencyManager::GetInstance()) {}
+
+BrowserOSMetricsServiceFactory::~BrowserOSMetricsServiceFactory() = default;
+
+std::unique_ptr<KeyedService>
+BrowserOSMetricsServiceFactory::BuildServiceInstanceForBrowserContext(
+    content::BrowserContext* context) const {
+  Profile* profile = Profile::FromBrowserContext(context);
+  
+  // Don't create service for incognito profiles
+  if (profile->IsOffTheRecord()) {
+    return nullptr;
+  }
+  
+  return std::make_unique<BrowserOSMetricsService>(
+      profile->GetPrefs(),
+      profile->GetDefaultStoragePartition()
+          ->GetURLLoaderFactoryForBrowserProcess());
+}
+
+}  // namespace browseros_metrics
\ No newline at end of file
diff --git a/components/metrics/browseros_metrics/browseros_metrics_service_factory.h b/components/metrics/browseros_metrics/browseros_metrics_service_factory.h
new file mode 100644
index 0000000000000..014eb17aba442
--- /dev/null
+++ b/components/metrics/browseros_metrics/browseros_metrics_service_factory.h
@@ -0,0 +1,48 @@
+// Copyright 2025 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_SERVICE_FACTORY_H_
+#define COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_SERVICE_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+
+namespace content {
+class BrowserContext;
+}  // namespace content
+
+namespace browseros_metrics {
+
+class BrowserOSMetricsService;
+
+// Factory for creating BrowserOSMetricsService instances per profile.
+class BrowserOSMetricsServiceFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+  BrowserOSMetricsServiceFactory(const BrowserOSMetricsServiceFactory&) =
+      delete;
+  BrowserOSMetricsServiceFactory& operator=(
+      const BrowserOSMetricsServiceFactory&) = delete;
+
+  // Returns the BrowserOSMetricsService for |context|, creating one if needed.
+  static BrowserOSMetricsService* GetForBrowserContext(
+      content::BrowserContext* context);
+
+  // Returns the singleton factory instance.
+  static BrowserOSMetricsServiceFactory* GetInstance();
+
+ private:
+  friend base::NoDestructor<BrowserOSMetricsServiceFactory>;
+
+  BrowserOSMetricsServiceFactory();
+  ~BrowserOSMetricsServiceFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  std::unique_ptr<KeyedService> BuildServiceInstanceForBrowserContext(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace browseros_metrics
+
+#endif  // COMPONENTS_METRICS_BROWSEROS_METRICS_BROWSEROS_METRICS_SERVICE_FACTORY_H_
\ No newline at end of file
-- 
2.49.0

