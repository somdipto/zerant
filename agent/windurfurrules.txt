---
description: 
globs: 
alwaysApply: true
---
# Code Style & Formatting
- Use English for all code and documentation.
- Write concise, technical TypeScript. Follow Standard.js rules.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Keep interfaces in the same file as their components rather than in a separate types directory.
- Use JSDoc to document public classes and methods.
- For interfaces, class properties, and smaller logic use inline comments, give two spaces and "// <comment>".
- DO NOT use JSDoc-style comments (`/** ... */`) for class properties or schema definitions, use inline comments instead.
- Favor loops and small helper modules over duplicate code.
- Use descriptive names with auxiliary verbs (e.g. isLoading, hasError).
- File layout: exported component → subcomponents → hooks/helpers → static content.

# Naming Conventions
- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Directories: Use kebab-case (e.g. components/auth-wizard).
- Files: Use PascalCase (e.g. UserProfile.tsx, AuthService.ts).
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.
- File extensions:
  - Components → .tsx
  - Hooks/Utils → .ts
  - Style modules → .module.scss
- Prefer named exports for components
- Types/Interfaces in PascalCase (e.g. User, ButtonProps)
- OUR PRODUCT NAME IS Nxtscape (the "s" is small letter) -- so use that name correctly when naming things.

# Functions & Logic
- Keep functions short and single-purpose (<20 lines).
- Avoid deeply nested blocks by:
- Using early returns.
- Extracting logic into utility functions.
- Use higher-order functions (map, filter, reduce) to simplify logic.
- Use arrow functions for simple cases (<3 instructions), named functions otherwise.
- Use default parameter values instead of null/undefined checks.
- Use RO-RO (Receive Object, Return Object) for passing and returning multiple parameters.

# Data Handling
- Avoid excessive use of primitive types; encapsulate data in composite types.
- Avoid placing validation inside functions—use classes with internal validation instead.
- Prefer immutability for data:
- Use readonly for immutable properties.
- Use as const for literals that never change.

# TypeScript & Zod
- ALWAYS define data structures using Zod schemas instead of interfaces or types.
- NEVER use plain TypeScript interfaces; always convert them to Zod schemas.
- ALWAYS use inline comments with two spaces followed by `// <comment>` next to each key in Zod schemas, NOT JSDoc-style comments (`/** ... */`).
- Use the following pattern for all data structures:
  ```ts
  // First, import Zod
  import { z } from "zod";

  // Define your schema using Zod
  export const UserSchema = z.object({
    id: z.string().uuid(),  // Unique identifier for the user
    name: z.string().min(2),  // User's full name
    email: z.string().email(),  // User's email address
    age: z.number().int().positive().optional(),  // User's age in years
    role: z.enum(["admin", "user", "editor"]),  // User's permission role
    metadata: z.record(z.string(), z.unknown()).optional(),  // Additional user metadata
    createdAt: z.date()  // When the user was created
  })

  // For enums, place comments on the same line as enum values
  export const StatusSchema = z.enum([
    'PENDING',  // Awaiting processing
    'ACTIVE',   // Currently active
    'INACTIVE', // No longer active
    'DELETED'   // Marked for deletion
  ])

  // Infer the TypeScript type from the Zod schema
  export type User = z.infer<typeof UserSchema>;
  ```
- Naming conventions for Zod schemas:
  - Schema variables: PascalCase with "Schema" suffix (e.g., `UserSchema`, `ConfigSchema`)
  - Inferred types: PascalCase without suffix (e.g., `type User = z.infer<typeof UserSchema>`)
- Use appropriate Zod validators to ensure runtime safety:
  - String validation: `.min()`, `.max()`, `.email()`, `.url()`, etc.
  - Number validation: `.int()`, `.positive()`, `.min()`, `.max()`, etc.
  - Object validation: `.strict()` when appropriate
- For optional properties, use `.optional()` instead of the TypeScript `?` syntax
- For nullable values, use `.nullable()` instead of TypeScript union with `null`
- For recursive types, provide a type hint:
  ```ts
  const baseCategorySchema = z.object({
    name: z.string(),
  });

  type Category = z.infer<typeof baseCategorySchema> & {
    subcategories: Category[];
  };

  const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({
    subcategories: z.lazy(() => categorySchema.array()),
  });
  ```
- For discriminated unions, use `z.discriminatedUnion()` with the discriminator field
- For enums, use `z.enum()` or `z.nativeEnum()` for TypeScript enums

# Accessibility (a11y)

- Use semantic HTML.
- Apply appropriate ARIA attributes.
- Ensure full keyboard navigation.


# Error Handling & Validation
- Validate inputs and preconditions early (guard clauses).
- Place happy-path logic last.
- Provide clear, user‑friendly error messages.
- Log or report unexpected errors.

# Forms & Validation
- Use controlled inputs.
- For simple forms, write custom hooks; for complex ones, use react-hook-form with generics (e.g. <Controller>).
- Separate client‑side and server‑side validation.
- Use Zod schemas for form validation.


# Performance Optimization
- Minimize client‑only code (useEffect/useState) where unnecessary.
- Dynamically import non‑critical components.
- Optimize images (WebP, width/height, lazy-loading).
- Memoize expensive computations with useMemo.
- Wrap pure components in React.memo.
- Structure modules for effective tree‑shaking.

# React + TypeScript Best Practices
- Define props with Zod schemas, not interfaces:

```ts
// Define the props schema with Zod
const ButtonPropsSchema = z.object({
  label: z.string(),
  onClick: z.function().args().returns(z.void()).optional()
});

// Infer the type from the schema
type ButtonProps = z.infer<typeof ButtonPropsSchema>;

export function Button({ label, onClick }: ButtonProps) {
  return <button onClick={onClick}>{label}</button>
}
```

- Call hooks (useState, useEffect, etc.) only at the top level.
- Extract reusable logic into custom hooks (useAuth, useFormValidation).
- Memoize with React.memo, useCallback, useMemo where appropriate.
- Avoid inline functions in JSX—pull handlers out or wrap in useCallback.
- Favor composition (render props, children) over inheritance.
- Use React.lazy + Suspense for code splitting.
- Use refs only for direct DOM access.
- Prefer controlled components for forms.
- Implement an error boundary component.
- Clean up effects in useEffect to prevent leaks.
- Use guard clauses (early returns) for error handling.

# Standard.js Rules
- 2‑space indentation
- Single quotes (except to avoid escaping)
- No semicolons (unless disambiguation requires)
- No unused variables
- Space after keywords (if (… ))
- Space before function's (
- Always use === / !==
- Operators spaced (a + b)
- Commas followed by space
- else on same line as closing }
- Multi‑line if blocks always use { }
- Always handle error callback parameters
- camelCase for variables/functions; PascalCase for components and interfaces

# State Management (Zustand)
- Global state: Zustand
- Lift state up before introducing context.
- Use React Context for intermediate, tree‑wide sharing.

# TypeScript Configuration
- Enable "strict": true in tsconfig.json.
- Explicitly type function returns and object literals.
- Enforce noImplicitAny, strictNullChecks, strictFunctionTypes.
- Minimize use of @ts-ignore/@ts-expect-error.

# UI & Styling (SCSS Modules)
- Co‑locate a .scss file with each component.
- Leverage SCSS features:
  - Variables ($primary-color, $spacing)
  - Mixins (@mixin flexCenter)
  - Parent selector & for pseudo‑classes (&:hover)
- Partials (_variables.scss, _mixins.scss) imported in styles/index.scss
- Name classes in camelCase or BEM (.card__header).
- Keep global styles minimal (e.g. reset, typography).
